import json

from opcodes.opcodeGramExtractionBase import classParse


def main():
    # 读入json文件，确定要取的样本特征类型,与以往不同的是，这里读取的是feature-IDF
    # classParse传入的features是字典类型，而不是仅仅作为keys的list
    with open(r"feature-IDF-pairs.json", "r") as f:
        features = json.load(f)

    with open("../config.json") as f:
        configs = json.load(f)

    csvName = configs['opcodeGrams_csv_name']
    feaClass = csvName[:-4]
    # 对于每一个文件，都应该完成features的填充，boolean类型
    print('Start to extract ' + feaClass + ' features for each malicious sample in train set:')
    classParse(features, configs['malicious_train_samples_path'], configs['mal_train_csv_path'] + csvName)
    print()

    print('Start to extract ' + feaClass + ' features for each benign sample in train set:')
    classParse(features, configs['benign_train_samples_path'], configs['ben_train_csv_path'] + csvName)
    print()

    print('Start to extract ' + feaClass + ' features for each malicious sample in validation set:')
    classParse(features, configs['malicious_validation_samples_path'], configs['mal_validation_csv_path'] + csvName)
    print()

    print('Start to extract ' + feaClass + ' features for each benign sample in validation set:')
    classParse(features, configs['benign_validation_samples_path'], configs['ben_validation_csv_path'] + csvName)
    print()

    print('Start to extract ' + feaClass + ' features for each test sample:')
    classParse(features, configs['test_samples_path'], configs['test_csv_path'] + csvName)
    print()